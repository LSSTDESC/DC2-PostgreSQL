# Each dict in in the list below may have the following keys:
# NativeInputs  (required) - list of column names as they appear in Fits headers
#     except that certain substitutions may be specified by using substrings 
#     {BAND}, {FLUX}, {ERR}. Code interpreting the YAML should substitute for
#     FLUX and ERR as appropriate, depending on schema version of fits files.
# DPDDname (required)   Output name.  Supports substitutions like NativeInputs
# Datatype (optional)   May be any of int, long, double, float (default), flag.
# Lambda (optional)   Expression (as string) needed to compute dpdd quantity
# RPN (optional) RPN-like representation of how to compute dpdd quantity.
# When neither Lambda nor RPN is present, output is just set to value of input 
#      (should be only one item in the list)
# The forced source view includes some items also in the object catalog view
# (known as dpdd).   
# Another option would be to include it all in a single view
#
# See also the file nativeforcedsource_to_dpdd_postgres.yaml
view_name : forcedsource
table_spec :
-
    table_name : position
- 
    table_name : forcedsourcenative
    join_type  : 'inner join'
    join_on : 'objectid = object_id'
-
    table_name : ccdvisit
    join_type : 'join'
    join_using : [ccdvisitid]
-
    table_name : dpdd_ref
    join_type : 'join'
    join_using : [object_id]
-
    table_name : dpdd_forced
    join_type : 'join'
    join_using : [object_id]

columns:
- 
    NativeInputs:   [objectid]
    Datatype: long
    DPDDname: objectid
- 
    NativeInputs:   [ccdvisitid]
    Datatype: long
    DPDDname: ccdvisitid
- 
    NativeInputs: [coord_ra]
    Datatype: double
    DPDDname: ra
- 
    NativeInputs: [coord_dec]
    Datatype: double
    DPDDname: dec
-
    NativeInputs: [base_ClassificationExtendedness_value]
    DPDDname:  extendedness
-
    NativeInputs: ['base_Blendedness_abs_{FLUX}']
    DPDDname: blendedness
-   NativeInputs: ['filtername']
    DPDDname: filtername
    #Datatype: 'char(1)'
-   
    NativeInputs: ['obsstart']
    DPDDname: obsstart
    #Datatype: 'timestamp'
- 
    NativeInputs: ['{BAND}_base_PsfFlux_{FLUX}']
    DPDDname: 'psFlux_{BAND}'
-
    NativeInputs: ['{BAND}_base_PsfFlux_flag']
    DPDDname: 'psFlux_flag_{BAND}'
- 
    NativeInputs: ['forcedsourcenative.base_PsfFlux_{FLUX}']
    DPDDname: 'psFlux'
-
    NativeInputs: ['forcedsourcenative.base_PsfFlux_flag']
    DPDDname: 'psFlux_flag'
-
    NativeInputs: ['{BAND}_base_psfFlux_{FLUX}{ERR}']
    DPDDname: 'psFluxErr_{BAND}'
- 
    NativeInputs: ['{BAND}_base_PsfFlux_{FLUX}']
    DPDDname: 'mag_{BAND}'
    Lambda: 'lambda x: -2.5 * np.log10(x) + 27.0'
    RPN: [27.0,x1,'log()',-2.5, '*','+']
- 
    NativeInputs: ['{BAND}_base_PsfFlux_{FLUX}', '{BAND}_base_PsfFlux_{FLUX}{ERR}' ]
    DPDDname: 'magerr_{BAND}'
    Lambda: 'lambda x,y: (2.5 * y) / (x* np.log10(x))'
    RPN: [x1,'log()',x1, '*', 2.5,x2,'*','/']
-
    NativeInputs: ['forcedsourcenative.base_psfFlux_{FLUX}{ERR}']
    DPDDname: 'psFluxErr'
- 
    NativeInputs: ['forcedsourcenative.base_PsfFlux_{FLUX}', 'ccdvisit.zeropoint']
    DPDDname: 'mag'
    Lambda: 'lambda x,y: -2.5 * np.log10(x) + y'
    RPN: [x2,x1,'log()',-2.5, '*','+']
- 
    NativeInputs: ['forcedsourcenative.base_PsfFlux_{FLUX}', 'forcedsourcenative.base_PsfFlux_{FLUX}{ERR}' ]
    DPDDname: 'magerr'
    Lambda: 'lambda x,y: (2.5 * y) / (x* np.log10(x))'
    RPN: [x1,'log()',x1, '*', 2.5,x2,'*','/']
-
    NativeInputs: [dpdd_ref.good]
    DPDDname:     good
    Datatype:     flag
-
    NativeInputs: [forcedsourcenative.forcedsourcevisit_good]
    DPDDname:     forcedsourcevisit_good
    Datatype:     flag
-
    NativeInputs: [dpdd_ref.good,  deblend_skipped]
    DPDDname:     clean
    Datatype:     flag
    RPN:          [x1, x2, 'not', 'and']

